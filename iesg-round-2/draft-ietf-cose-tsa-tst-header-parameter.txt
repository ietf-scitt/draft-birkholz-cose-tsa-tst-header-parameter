



COSE                                                         H. Birkholz
Internet-Draft                                            Fraunhofer SIT
Intended status: Standards Track                              T. Fossati
Expires: 14 December 2025                                         Linaro
                                                             M. Riechert
                                                               Microsoft
                                                            12 June 2025


          COSE Header parameter for RFC 3161 Time-Stamp Tokens
            draft-ietf-cose-tsa-tst-header-parameter-latest

Abstract

   This document defines two CBOR Signing And Encrypted (COSE) header
   parameters for incorporating RFC 3161-based timestamping into COSE
   message structures (COSE_Sign and COSE_Sign1).  This enables the use
   of established RFC 3161 timestamping infrastructure to prove the
   creation time of a message.

Discussion Venues

   This note is to be removed before publishing as an RFC.

   Source for this draft and an issue tracker can be found at
   https://github.com/ietf-scitt/draft-birkholz-cose-tsa-tst-header-
   parameter.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 14 December 2025.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
     1.1.  Use Cases
     1.2.  Requirements Notation
   2.  Modes of Use
     2.1.  Timestamp then COSE (TTC)
     2.2.  COSE then Timestamp (CTT)
   3.  RFC 3161 Time-Stamp Tokens COSE Header Parameters
     3.1.  3161-ttc
     3.2.  3161-ctt
   4.  Timestamp Processing
   5.  Security Considerations
   6.  IANA Considerations
   7.  References
     7.1.  Normative References
     7.2.  Informative References
   Acknowledgments
   Contributors
   Authors' Addresses

1.  Introduction

   RFC 3161 [RFC3161] provides a method to timestamp a message digest to
   prove that it was created before a given time.

   This document defines two new CBOR Object Signing and Encryption
   (COSE) [STD96] header parameters that carry the TimestampToken (TST)
   output of RFC 3161, thus allowing existing and widely deployed trust
   infrastructure to be used with COSE structures used for signing
   (COSE_Sign and COSE_Sign1).

1.1.  Use Cases

   This section discusses two use cases, each representing one of the
   two modes of use defined in Section 2.

   A first use case is a digital document signature signed alongside a
   trustworthy timestamp.  This is a common case in legal contracts.  In
   such scenarios, the document signer wants to reinforce the claim that
   the document was signed at a specific time.  To achieve this, the
   document signer acquires a fresh TST for the document's signature
   from a TSA and concatenates it with the document.  Later on, a
   relying party consuming the both the signed document and the TST can
   be certain that the document was signed _at least_ at the time
   specified by the TSA.  The relying party does not have to trust the
   document signer's clock, which may have been maliciously altered or
   simply inaccurate.

   This usage scenario motivates the "COSE then Timestamp" mode
   described in Section 2.2.

   A second use case is the notarization of a signed documents by
   registering it at a transparency service.  This is common for
   accountability and auditability of issued documents, also referred to
   'statements' in this context.  It is also common to only register
   signed parts of a document (typically referred to as a 'signed
   statement') at a transparency service to reduce the complexity of
   consistency checks at a later point in time, which would require the
   retrieval or reconstruction of unsigned parts.  Once a document's
   signed parts are registered at a transparency service's append-only
   log, its log entry cannot be changed.  To not loose the TST during a
   registration procedure, it must be part of the signed statement.  To
   achieve this, the Issuer acquires a TST from a TSA, bundles it with
   the unsigned document so that the resulting signed statement includes
   the TST, and then registers the signed parts (rendering it a
   'transparent statement').  Later on, a relying party consuming the
   transparent statement including the TST can be certain that statement
   was signed by the Issuer _at least_ at the time specified by the TSA.
   A relying party that wants to ascertain the authenticity of the
   statement after the issuer's signing key has expired (or has been
   compromised), can do so by making sure that no revocation information
   has been made public before the time asserted by the issuer,
   registered at the transparency service.

   This usage scenario motivates the "Timestamp then COSE" mode defined
   in Section 2.1.

1.2.  Requirements Notation

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

2.  Modes of Use

   There are two different modes of composing COSE protection and
   timestamping, motivated by the usage scenarios discussed above.

   The diagrams in this section illustrate the processing flow of the
   specified modes.  For simplicity, only the COSE_Sign1 processing is
   shown.  Similar diagrams for COSE_Sign can be derived by allowing
   multiple private-key boxes and replacing the label [signature] with
   [signatures].

2.1.  Timestamp then COSE (TTC)

   Figure 1 shows the case where a datum is first digested and submitted
   to a TSA to be timestamped.

   This mode is utilized when the signature should also be performed
   over the timestamp to provide an immutable timestamp.

   A signed COSE message is then built as follows:

   *  The obtained timestamp token is added to the protected headers,

   *  The original datum becomes the payload of the signed COSE message.

   .--------.                                     .-----.
   | Signer |                                     | TSA |
   +--------+----------------------------------.  +-----+-------------.
   |   .-------------.          .-------.      |  |   .-------------. |
   |  / private-key /           | nonce +-------->+  / private-key /  |
   | '-+-----------'            '-------'      |  | '------+------'   |
   |   |                       .---------.     |  |        |          |
   |   |  .-------.   .----.   | Message |     |  |        |          |
   |   |  + datum +->+ hash +->+ Imprint +------->+       .+.         |
   |   |  '-+-----'   '----'   '---------'     |  |      | L | Clock  |
   |   |    |                                  |  |       '+'         |
   |   |    |               .-------------.    |  |        |          |
   |   v    v               |  protected  |    |  |        v          |
   |  .-------.             |   .-----.   |    |  |    .---------.    |
   | |  Sign1  +<-----------+   | TST |<----------+   | timestamp |   |
   |  '-+-----'             |   '-----'   |    |  |    '---------'    |
   |    |                   '-------------'    |  |                   |
   '----|--------------------------------------'  '-------------------'
        |                                 .-------------.
        +-------------+-----------+       | unprotected |
        |             |            |      |   .-----.   |
   [protected]    [payload]   [signature] |   | ... |   |
        |             |            |      |   '-----'   |
        |             v            v      '------+------'
        |     .-------+------------+-----.       |
         '--->+     rfc3161-ttc COSE     +<-----'
              '--------------------------'

                    Figure 1: Timestamp, then COSE (TCC)

2.2.  COSE then Timestamp (CTT)

   Figure 2 shows the case where the signature(s) field of the signed
   COSE object is digested and submitted to a TSA to be timestamped.
   The obtained timestamp token is then added back as an unprotected
   header into the same COSE object.

   This mode is utilized when a record of the timing of the signature
   operation is desired.

   .--------.                                     .-----.
   | Signer |                                     | TSA |
   +--------+----------------------------------.  +-----+-------------.
   |   .-------------. .-----------. .-------. |  |   .-------------. |
   |  / private-key /  | protected | | datum | |  |  / private-key /  |
   | '-----+-------'   '---+-------' '---+---' |  | '------+------'   |
   |       |               |             |     |  |        |          |
   |       +---------------+------------'      |  |        |          |
   |       |                                   |  |       .+.         |
   |       v                  .---------.      |  |      | L | Clock  |
   |  .---------.    .----.   | Message |      |  |       '+'         |
   | |   Sign1   +->+ hash +->+ Imprint +-------->|        |          |
   |  '-+-------'    '----'   '---------'      |  |        v          |
   |    |                      .-------.       |  |    .---------.    |
   |    |                      | nonce +--------->|   | timestamp |   |
   |    |                      '-------'       |  |    '---------'    |
   '----|--------------------------------------'  '---------+---------'
        |                                 .-------------.   |
        +-------------+-----------+       | unprotected |   |
        |             |            |      |   .-----.   |   |
   [protected]    [payload]   [signature] |   | TST |<-----'
        |             |            |      |   '-----'   |
        |             v            v      '------+------'
        |     .-------+------------+-----.       |
         '--->+     rfc3161-ctt COSE     +<-----'
              '--------------------------'

                    Figure 2: COSE, then Timestamp (CTT)

   In this context, timestamp tokens are similar to a countersignature
   made by the TSA.

3.  RFC 3161 Time-Stamp Tokens COSE Header Parameters

   The two modes described in Section 2.1 and Section 2.2 use different
   inputs into the timestamping machinery, and consequently create
   different kinds of binding between COSE and TST.  To clearly separate
   their semantics two different COSE header parameters are defined as
   described in the following subsections.

3.1.  3161-ttc

   The 3161-ttc COSE _protected_ header parameter MUST be used for the
   mode described in Section 2.1.

   The 3161-ttc protected header parameter contains a DER-encoded
   RFC3161 TimeStampToken wrapped in a CBOR byte string (Major type 2).

   The MessageImprint sent to the TSA (Section 2.4 of [RFC3161]) MUST be
   the hash of the payload field of the COSE signed object.

   To minimize dependencies, the hash algorithm used for signing the
   COSE message SHOULD be the same as the algorithm used in the RFC3161
   MessageImprint.

3.2.  3161-ctt

   The 3161-ctt COSE _unprotected_ header parameter MUST be used for the
   mode described in Section 2.2.

   The 3161-ctt unprotected header parameter contains a DER-encoded
   RFC3161 TimeStampToken wrapped in a CBOR byte string (Major type 2).

   The message imprint sent in the request to the TSA MUST be either:

   *  the hash of the signature field of the COSE_Sign1 message, or

   *  the hash of the signatures field of the COSE_Sign message.

   In either case, to minimize dependencies, the hash algorithm SHOULD
   be the same as the algorithm used for signing the COSE message.  This
   may not be possible if the timestamp token has been obtained outside
   the processing context in which the COSE object is assembled.

4.  Timestamp Processing

   RFC 3161 timestamp tokens use CMS as signature envelope format.
   [STD70] provides the details about signature verification, and
   [RFC3161] provides the details specific to timestamp token
   validation.  The payload of the signed timestamp token is the TSTInfo
   structure defined in [RFC3161], which contains the MessageImprint
   that was sent to the TSA.  The hash algorithm is contained in the
   MessageImprint structure, together with the hash itself.

   As part of the signature verification, the receiver MUST make sure
   that the MessageImprint in the embedded timestamp token matches a
   hash of either the payload, signature, or signature fields, depending
   on the mode of use and type of COSE structure.

   Appendix B of [RFC3161] provides an example that illustrates how
   timestamp tokens can be used to verify signatures of a timestamped
   message when utilizing X.509 certificates.

5.  Security Considerations

   Please review the Security Considerations section in [RFC3161]; these
   considerations apply to this document as well.

   Also review the Security Considerations section in [STD96]; these
   considerations apply to this document as well, especially the need
   for implementations to protect private key material.

   The following scenario assumes an attacker can manipulate the clocks
   on the COSE signer and its relying parties, but not the TSA.  It is
   also assumed that the TSA is a trusted third party, so the attacker
   cannot impersonate the TSA and create valid timestamp tokens.  In
   such a setting, any tampering with the COSE signer's clock does not
   have an impact because, once the timestamp is obtained from the TSA,
   it becomes the only reliable source of time.  However, in both CTT
   and TTC mode, a denial of service can occur if the attacker can
   adjust the relying party's clock so that the CMS validation fails.
   This could disrupt the timestamp validation.

   In CTT mode, an attacker could manipulate the unprotected header by
   removing or replacing the timestamp.  To avoid that, the signed COSE
   object should be integrity protected during transit and at rest.

   In TTC mode, the TSA is given an opaque identifier (a cryptographic
   hash value) for the payload.  While this means that the content of
   the payload is not directly revealed, to prevent comparison with
   known payloads or disclosure of identical payloads being used over
   time, the payload would need to be armored, e.g., with a nonce that
   is shared with the recipient of the header parameter but not the TSA.
   Such a mechanism can be employed inside the ones described in this
   specification, but is out of scope for this document.

   Consumers of TSTs typically rely not only on accurate time but also
   prompt reporting of compromised keys.  [STD96] discusses the
   necessity of keeping private keys private, but does not discuss the
   prompt reporting when those keys are disclosed.  Therefore, keeping
   track of cryptoperiods, key rotation, or key revocation is an
   essential part of trusting a TSA.  Additionally, the resolution,
   accuracy, and precision of a TSA's clock (see [RFC9581] for further
   details on a clock's qualities), as well as an expected latency
   introduced by round trips to the TSA and back can be critical
   information that has to be taken into account by implementers when
   implementing the COSE header parameters defined in this document.

6.  IANA Considerations

   IANA is requested to add the COSE header parameters defined in
   Table 1 to the "COSE Header Parameters" registry
   [IANA.cose_header-parameters].

   +==========+=======+=======+==========+=================+===========+
   | Name     | Label | Value | Value    | Description     | Reference |
   |          |       | Type  | Registry |                 |           |
   +==========+=======+=======+==========+=================+===========+
   | 3161-ttc | TBD1  | bstr  | -        | RFC 3161        | RFCthis,  |
   |          |       |       |          | timestamp       | Section   |
   |          |       |       |          | token           | 3.1       |
   +----------+-------+-------+----------+-----------------+-----------+
   | 3161-ctt | TBD2  | bstr  | -        | RFC 3161        | RFCthis,  |
   |          |       |       |          | timestamp       | Section   |
   |          |       |       |          | token           | 3.2       |
   +----------+-------+-------+----------+-----------------+-----------+

                    Table 1: New COSE Header Parameters

7.  References

7.1.  Normative References

   [IANA.cose_header-parameters]
              IANA, "COSE Header Parameters",
              <https://www.iana.org/assignments/cose>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC3161]  Adams, C., Cain, P., Pinkas, D., and R. Zuccherato,
              "Internet X.509 Public Key Infrastructure Time-Stamp
              Protocol (TSP)", RFC 3161, DOI 10.17487/RFC3161, August
              2001, <https://www.rfc-editor.org/rfc/rfc3161>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [STD70]    Housley, R., "Cryptographic Message Syntax (CMS)", STD 70,
              RFC 5652, DOI 10.17487/RFC5652, September 2009,
              <https://www.rfc-editor.org/rfc/rfc5652>.

   [STD96]    Schaad, J., "CBOR Object Signing and Encryption (COSE):
              Structures and Process", STD 96, RFC 9052,
              DOI 10.17487/RFC9052, August 2022,
              <https://www.rfc-editor.org/rfc/rfc9052>.

7.2.  Informative References

   [RFC9581]  Bormann, C., Gamari, B., and H. Birkholz, "Concise Binary
              Object Representation (CBOR) Tags for Time, Duration, and
              Period", RFC 9581, DOI 10.17487/RFC9581, August 2024,
              <https://www.rfc-editor.org/rfc/rfc9581>.

Acknowledgments

   The editors would like to thank Carl Wallace, Leonard Rosenthol,
   Michael B.  Jones, Michael Prorock, Orie Steele, and Steve Lasker for
   their reviews and comments.

Contributors

   Carsten Bormann
   Email: cabo@tzi.org


   Carsten contributed part of the security considerations.

   Orie Steele
   Email: orie@transmute.industries


   Orie contributed an improved version of the diagrams.

Authors' Addresses

   Henk Birkholz
   Fraunhofer SIT
   Rheinstrasse 75
   64295 Darmstadt
   Germany
   Email: henk.birkholz@sit.fraunhofer.de


   Thomas Fossati
   Linaro
   Email: thomas.fossati@linaro.org


   Maik Riechert
   Microsoft
   United Kingdom
   Email: Maik.Riechert@microsoft.com
